/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
{{#if generateClasses}}
{{#if generateFormGroups}}
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from '{{type.pathToRoot}}{{validatorFileName}}';
{{/if}}
import { BaseModel } from '{{type.pathToRoot}}{{baseModelFileName}}';
import { SubTypeFactory } from '{{type.pathToRoot}}{{subTypeFactoryFileName}}';
{{/if}}

{{#with type}}
    {{#if isSubType}}
import { {{baseType.typeName}} } from '{{baseImportFile}}';
    {{/if}}
{{#properties}}
    {{#if isUniqueImportType}}
import { {{importType}} } from '{{importFile}}';
    {{/if}}
    {{#if isUniqueImportEnumType}}
import { {{importEnumType}} } from '{{../../enumRef}}';
    {{/if}}
{{/properties}}

{{#if ../generateClasses}}
export interface I{{{typeName}}} {
{{else}}
export interface {{{typeName}}} {{#if hasSubTypeProperty}}extends {{{baseType.typeName}}}{{/if}} {
{{/if}}
{{#properties}}
    {{name}}{{#unless validators.validation.required}}?{{/unless}}: {{{typeName}}};
{{/properties}}
}

{{#if ../generateClasses}}

export class {{{typeName}}} extends {{#if isSubType}}{{{baseType.typeName}}}{{else}}BaseModel{{/if}} implements I{{{typeName}}}  {
{{#if hasSubTypeProperty}}
    static {{{../subTypePropertyConstantName}}} = '{{{fullTypeName}}}';
{{/if}}

{{#properties}}
    static {{staticFieldName}} = '{{name}}';
{{/properties}}

{{#properties}}
    {{#if description}}
    /** {{{description}}} */
    {{/if}}
    {{name}}: {{{typeName}}};
{{/properties}}

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    {{#if ../generateFormGroups}}* @useFormGroupValuesToModel if true use formValues{{/if}}
    */
    constructor(values?: any{{#if ../generateFormGroups}}, useFormGroupValuesToModel = false{{/if}}) {
        super();
{{#if hasSubTypeProperty}}

        this.{{{../subTypePropertyName}}} = {{{typeName}}}.{{{../subTypePropertyConstantName}}};
{{/if}}
{{#properties}}
    {{#if isComplexType}}
        this.{{name}} = new {{{typeName}}}(); {{#if type.isBaseType}}// baseTypes should not be instantiated{{/if}}
    {{/if}}
{{/properties}}

        if (values) {
            this.setValues(values{{#if ../generateFormGroups}}, useFormGroupValuesToModel{{/if}});
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: any{{#if ../generateFormGroups}}, useFormGroupValuesToModel = false{{/if}}): void {
        if (values) {
            const rawValues = {{#if ../generateFormGroups}}this.getValuesToUse(values, useFormGroupValuesToModel);{{else}}values{{/if}}
{{#properties}}
    {{#if isArray}}
            this.fillModelArray<{{arrayTypeName}}>(this, {{../fullTypeName}}.{{staticFieldName}}, rawValues.{{name}}{{#if ../../generateFormGroups}}, useFormGroupValuesToModel{{/if}}{{#if isArrayComplexType}}, {{arrayTypeName}}, SubTypeFactory.createSubTypeInstance{{/if}});
    {{else}}
        {{#if isComplexType}}
            {{#if type.isBaseType}}
            if (rawValues.{{name}} && rawValues.{{name}}.{{{../../subTypePropertyName}}} &&
                this.{{name}}.{{{../../subTypePropertyName}}} !== rawValues.{{name}}.{{{../../subTypePropertyName}}}) {
                this.{{name}} = SubTypeFactory.createSubTypeInstance(rawValues.{{name}}) as {{typeName}};
            }
            {{/if}}
            this.{{name}}.setValues(rawValues.{{name}}{{#if ../../generateFormGroups}}, useFormGroupValuesToModel{{/if}});
        {{else}}
            this.{{name}} = this.getValue<{{typeName}}>(rawValues, {{../fullTypeName}}.{{staticFieldName}});
        {{/if}}
    {{/if}}
{{/properties}}
            {{#if ../generateFormGroups}}
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
            {{/if}}
        }
    }

{{#if ../generateFormGroups}}
    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
{{#properties}}
{{#if isArray}}
                {{name}}: new FormArray([]),
{{else if isImportType}}
                {{name}}: this.{{name}}.$formGroup,
{{else if hasValidation}}
                {{name}}: new FormControl(this.{{name}}, [{{#each validators.validatorArray}}{{{this}}}, {{/each}}]),
{{else}}
                {{name}}: new FormControl(this.{{name}}),
{{/if}}
{{/properties}}
            });
{{#properties}}
{{#if isArray}}
            // generate FormArray control elements
            this.fillFormArray<{{arrayTypeName}}>({{../fullTypeName}}.{{staticFieldName}}, this.{{name}}{{#if isArrayComplexType}}, {{arrayTypeName}}{{/if}});
{{/if}}
{{/properties}}
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
{{#properties}}
{{#if isArray}}
        this.fillFormArray<{{arrayTypeName}}>({{../fullTypeName}}.{{staticFieldName}}, this.{{name}}{{#if isArrayComplexType}}, {{arrayTypeName}}{{/if}});
{{else if isImportType}}
        this.{{name}}.setFormGroupValues();
{{else}}
        this.$formGroup.controls[{{../fullTypeName}}.{{staticFieldName}}].setValue(this.{{name}});
{{/if}}
{{/properties}}
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
{{/if}}
}
{{/if}}
{{/with}}
